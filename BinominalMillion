#include <iostream>
#include <random>
#include <chrono>
using namespace std;

struct Node 
{
	int key;
	int degree;

	Node* parent;
	Node* child;
	Node* sibling;

	Node(int value)
	{
		key = value;		
		degree = 0;
		parent = nullptr;
		child = nullptr;
		sibling = nullptr;
	}
};

class BinomialHeap {
private:
	Node* head;

	long long insertOperationsQuantity = 0;
	long long extractOperationsQuantity = 0;

	double InsertTime = 0;
	double extractMinTime = 0;
	
	Node* Union(Node* h1, Node* h2, bool operationType)
	{
		Node* nextHead = Merge(h1, h2);

		if (!nextHead) return nullptr;
		Node* previous = nullptr;

		Node* current = nextHead;
		Node* next = nextHead->sibling;

		while (next)
		{
			if ((current->degree != next->degree) || (next->sibling && (next->sibling->degree == current->degree)))
			{
				previous = current;
				current = next;
			}
			else
			{
				if (current->key <= next->key)
				{
					current->sibling = next->sibling;
					current = LinkTrees(current, next);
					if (operationType == true)
					{
						insertOperationsQuantity++;
					}
					else if (operationType == false)
					{
						extractOperationsQuantity++;
					}
				}
				else
				{
					if (!previous) nextHead = next;
					else previous->sibling = next;

					current = LinkTrees(next, current);

					if (operationType == true) insertOperationsQuantity++;
					else if (operationType == false)extractOperationsQuantity++;
				}
			}
			next = current->sibling;
		}
		return nextHead;
	}

	Node* LinkTrees(Node* firstTree, Node* secondTree) 
	{
		if (firstTree->key > secondTree->key) swap(firstTree, secondTree);
		secondTree->parent = firstTree;
		secondTree->sibling = firstTree->child;

		firstTree->child = secondTree;
		firstTree->degree++;

		return firstTree;
	}

	Node* Merge(Node* firstTree, Node* secondTree)
	{
		if (!firstTree) return secondTree;
		if (!secondTree) return firstTree;

		Node* head = nullptr;
		Node* tail = nullptr;

		while (firstTree && secondTree) 
		{
			Node* min;
			if (firstTree->degree <= secondTree->degree)
			{
				min = firstTree;
				firstTree = firstTree->sibling;
			}
			else 
			{
				min = secondTree;
				secondTree = secondTree->sibling;
			}

			if (!head)
			{
				head = tail = min;
			}
			else 
			{
				tail->sibling = min;
				tail = min;
			}
		}

		if (firstTree) tail->sibling = firstTree;
		else tail->sibling = secondTree;

		return head;
	}
	void Merge(BinomialHeap& other)
	{
		head = Union(head, other.head, false);
		other.head = nullptr;
	}
public:
	BinomialHeap()
	{
		head = nullptr;
	}
	~BinomialHeap()
	{
		Node* current = head;
		while (current)
		{
			Node* next = current->sibling;
			Node* child = current->child;

			while (child)
			{
				Node* nextChild = child->sibling;
				delete child;
				child = nextChild;
			}

			delete current;
			current = next;
		}
	}

	double getInsertTime()
	{
		return InsertTime;
	}
	double getExtractMinTime()
	{
		return extractMinTime;
	}
	double getInsertOperationsQuantity()
	{
		return insertOperationsQuantity;
	}
	double getExtractOperationsQuantity()
	{
		return extractOperationsQuantity;
	}

	void Insert(int key) 
	{
		Node* newNode = new Node(key);
		head = Union(head, newNode, true);
	}

	long long ExtractMin() 
	{
		if (!head) return -1;
		Node* minNodePrev = nullptr;
		Node* minNode = head;
		Node* next = head;
		Node* nextPrev = nullptr;
		int minKey = head->key;

		while (next->sibling)
		{
			if (next->sibling->key < minKey) 
			{
				minKey = next->sibling->key;
				minNodePrev = next;
				minNode = next->sibling;
			}
			nextPrev = next;
			next = next->sibling;
		}

		if (minNodePrev) minNodePrev->sibling = minNode->sibling;
		else head = minNode->sibling;

		Node* child = minNode->child;
		Node* newHead = nullptr;

		while (child)
		{
			Node* nextChild = child->sibling;
			child->sibling = newHead;
			newHead = child;
			child->parent = nullptr;
			child = nextChild;
		}
		head = Union(head, newHead, false);
		int minValue = minNode->key;
		delete minNode;

		return minValue;
	}
	int getMin()
	{
		if (!head) return -1;
		int minKey = head->key;
		Node* current = head->sibling;
		while (current) 
		{
			if (current->key < minKey) minKey = current->key;
			current = current->sibling;
		}
		return minKey;
	}

	void PerformRandomOperation(int numOperations)
	{
		srand(time(nullptr));
		for (int i = 0; i < numOperations; ++i)
		{
			int operationType = rand() % 2;
			auto start = std::chrono::high_resolution_clock::now();
			auto end = start;

			std::chrono::duration<double> duration;

			if (operationType == 0)
			{
				start = std::chrono::high_resolution_clock::now();
				ExtractMin();
				end = std::chrono::high_resolution_clock::now();
				duration = end - start;
				extractMinTime += duration.count();
			}
			else
			{
				start = std::chrono::high_resolution_clock::now();
				Insert(rand() % 10000);
				end = std::chrono::high_resolution_clock::now();
				duration = end - start;
				InsertTime += duration.count();
			}
		}
	}
};
int main() {
	BinomialHeap binominalHeap;
	random_device rd;
	mt19937 gen(rd());
	uniform_int_distribution<int> dist(1, 1000000);
	for (int i = 0; i < 1000000; ++i)
	{
		binominalHeap.Insert(dist(gen));
	}

	binominalHeap.PerformRandomOperation(200000);
	cout << "Insert duration: " << binominalHeap.getInsertTime() << endl;
	cout << "Extract min value duration: " << binominalHeap.getExtractMinTime() << endl;
	cout << "Insert operations: " << binominalHeap.getInsertOperationsQuantity() << endl;
	cout << "Extract min value operations: " << binominalHeap.getExtractOperationsQuantity() << endl;
	return 0;
}
